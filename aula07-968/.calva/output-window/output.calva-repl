; This is the Calva evaluation results output window.
; TIPS: The keyboard shortcut `ctrl+alt+o o` shows and focuses this window
;   when connected to a REPL session.
; Please see https://calva.io/output/ for more info.
; Happy coding! ♥️

; Jacking in...
; Connecting using "Leiningen" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 
; Starting Jack-in Terminal: pushd /Users/ramoneees/Documents/ada/estagio-nubank/aula07-968 ; lein update-in :dependencies conj '[nrepl,"1.0.0"]' -- update-in :plugins conj '[cider/cider-nrepl,"0.28.5"]' -- update-in '[:repl-options,:nrepl-middleware]' conj '["cider.nrepl/cider-middleware"]' -- repl :headless ; popd
; Using host:port 127.0.0.1:55637 ...
; Hooking up nREPL sessions ...
; Connected session: clj
; TIPS:
;   - You can edit the contents here. Use it as a REPL if you like.
;   - `alt+enter` evaluates the current top level form.
;   - `ctrl+enter` evaluates the current form.
;   - `alt+up` and `alt+down` traverse up and down the REPL command history
;      when the cursor is after the last contents at the prompt
;   - Clojure lines in stack traces are peekable and clickable.
; Evaluating code from settings: 'calva.autoEvaluateCode.onConnect.clj'
(when-let [requires (resolve 'clojure.main/repl-requires)] (clojure.core/apply clojure.core/require @requires))
nil
clj꞉aula07-968.core꞉>  ; Use `alt+enter` to evaluate
clj꞉aula07-968.core꞉> 
; Jack-in done.
clj꞉aula07-968.core꞉> 
(conj v 1)
; Syntax error compiling at (.calva/output-window/output.calva-repl:30:1).
; Unable to resolve symbol: v in this context
clj꞉aula07-968.core꞉> 
(def v [])
#'aula07-968.core/v
clj꞉aula07-968.core꞉> 
(conj v 1)
[1]
clj꞉aula07-968.core꞉> 
v
[]
clj꞉aula07-968.core꞉> 
(def v (conj v 1))
#'aula07-968.core/v
clj꞉aula07-968.core꞉> 
v
[1]
clj꞉aula07-968.core꞉> 
(def gravidade 10)
#'aula07-968.core/gravidade
clj꞉aula07-968.core꞉> 
(defn meu-peso-gravidade [peso]
  (* gravidade peso))
#'aula07-968.core/meu-peso-gravidade
clj꞉aula07-968.core꞉> 
(meu-peso-gravidade 50)
500
clj꞉aula07-968.core꞉> 
(defn adiciona-valor-vetor [valor]
  (conj v valor))
#'aula07-968.core/adiciona-valor-vetor
clj꞉aula07-968.core꞉> 
(adiciona-valor-vetor 2)
[1 2]
clj꞉aula07-968.core꞉> 
(def v [])
#'aula07-968.core/v
clj꞉aula07-968.core꞉> 
(adiciona-valor-vetor 2)
[2]
clj꞉aula07-968.core꞉> 
(adiciona-valor-vetor 2)
[2]
clj꞉aula07-968.core꞉> 
(def v [])
#'aula07-968.core/v
clj꞉aula07-968.core꞉> 
(defn adiciona-valor-vetor [valor]
  (let [v [1]]
    (conj v valor)))
#'aula07-968.core/adiciona-valor-vetor
clj꞉aula07-968.core꞉> 
(adiciona-valor-vetor 2)
[1 2]
clj꞉aula07-968.core꞉> 
(defn adiciona-valor-vetor [valor]
  (let [v [1]
        v (conj [] 2 3 4)]
    (conj v valor)))
#'aula07-968.core/adiciona-valor-vetor
clj꞉aula07-968.core꞉> 
(adiciona-valor-vetor 2)
[2 3 4 2]
clj꞉aula07-968.core꞉> 
(defn adiciona-valor-vetor [valor]
  (let [v []]
    (conj v valor)
    v))
#'aula07-968.core/adiciona-valor-vetor
clj꞉aula07-968.core꞉> 
(adiciona-valor-vetor 2) (defn adiciona-valor-vetor [valor]
                           (let [b []]
                             (conj b valor)
                             b))
#'aula07-968.core/adiciona-valor-vetor
clj꞉aula07-968.core꞉> 
(adiciona-valor-vetor 2)
[]
clj꞉aula07-968.core꞉> 
(defn adiciona-valor-vetor [valor]
  (let [b []
        b (conj b 2)]
    (conj b valor)
    b))
#'aula07-968.core/adiciona-valor-vetor
clj꞉aula07-968.core꞉> 
(adiciona-valor-vetor 2)
[2]
clj꞉aula07-968.core꞉> 
(adiciona-valor-vetor 3)
[2]
clj꞉aula07-968.core꞉> 
(defn adiciona-valor-vetor [valor]
  (let [b []
        b (conj b 2)]
    (conj b valor)
    b))
#'aula07-968.core/adiciona-valor-vetor
clj꞉aula07-968.core꞉> 
(macroexpand  '(adiciona-valor-vetor 2))
(adiciona-valor-vetor 2)
clj꞉aula07-968.core꞉> 
(macroexpand (adiciona-valor-vetor 2))

(adiciona-valor-vetor 2)
clj꞉aula07-968.core꞉> 
(macroexpand (adiciona-valor-vetor 2))
[2]
clj꞉aula07-968.core꞉> 
(macroexpand '(->> 2 (* 10) (assoc {} :a)))
(assoc {} :a (* 10 2))
clj꞉aula07-968.core꞉> 
(macroexpand '(let [b []
                    b (conj b 2)]
                (conj b valor)
                b))
(let* [b [] b (conj b 2)] (conj b valor) b)
clj꞉aula07-968.core꞉> 
(macroexpand '(if true
                "hello"
                "not hello"))
(if true "hello" "not hello")
clj꞉aula07-968.core꞉> 
(macroexpand '(when true
                "hello"))
(if true (do "hello"))
clj꞉aula07-968.core꞉> 
